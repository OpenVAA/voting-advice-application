import type { Id } from '@openvaa/core';
import type { AnyNominationVariant, AnyQuestionVariant, Image, QuestionCategory } from '@openvaa/data';
import type { ArgumentType } from './argumentType';

/**
 * Custom data properties for different `DataObject`s.
 * Be sure to update the mapping below when adding new custom data properties.
 */
export type CustomData = {
  /**
   * Typing of `customData` for any `Nomination` objects.
   */
  Nomination: {
    /**
     * A nomination can be marked as unconfirmed if the candidate registers in the app before the official electoral lists are published.
     */
    unconfirmed?: boolean;
  };
  /**
   * Typing of `customData` for any `Question` objects.
   */
  Question: {
    /**
     * Whether an open answer can be added in the Candidate App.
     */
    allowOpen?: boolean;
    /**
     * For `QuestionInput`. If `true`, translations cannot be entered.
     */
    disableMultilingual?: boolean;
    /**
     * Optional information shown to the candidate when filling out the question, but not the voters.
     */
    fillingInfo?: string;
    /**
     * Whether the question can be used for filtering in the results section of the Voter App.
     */
    filterable?: boolean;
    /**
     * Optional hero content for the category to be displayed as an illustration.
     */
    hero?: HeroContent;
    /**
     * If `true`, the question will be hidden in the Voter App but still visible in the Candidate App. Default `false`.
     */
    hidden?: boolean;
    /**
     * If `true`, Candidates cannot edit the question. A locked question is never considered `required`. Has no effect on opinion questions. Default `false`.
     */
    locked?: boolean;
    /**
     * For `QuestionInput`. If `true` for a text input, a `textarea` will be used instead of a `text` input.
     */
    longText?: boolean;
    /**
     * For `QuestionInput`. If provided, will set the `maxlength` of text inputs.
     */
    maxlength?: number;
    /**
     * Whether the question is required for the candidate to be listed in the Voter App.
     */
    required?: boolean;
    /**
     * Whether a multiple-choice questionâ€™s options should be displayed vertically instead of the default horizontal layout.
     */
    vertical?: boolean;
    /**
     * Properties for arguments for the question, such as pros and cons distilled from the open answers supplied by the candidates.
     */
    arguments?: Array<QuestionArguments>;
    /**
     * Properties for further information for the question, organized into sections.
     */
    infoSections?: Array<QuestionInfoSection>;
    /**
     * Properties for definitions of terms used in the question text.
     */
    terms?: Array<TermDefinition>;
    /**
     * Properties for optional video content for the question.
     */
    video?: VideoContent;
  };
  /**
   * Typing of `customData` for `QuestionCategory` objects.
   */
  QuestionCategory: {
    /**
     * Optional hero content for the category to be displayed as an illustration.
     */
    hero?: HeroContent;
    /**
     * Properties for optional video content for the question category, displayed on the category into page.
     */
    video?: VideoContent;
  };
};

/**
 * Mapping between different `DataObject`s and their custom data properties.
 */
export type CustomDataMap<TData> = TData extends AnyNominationVariant
  ? CustomData['Nomination']
  : TData extends AnyQuestionVariant
    ? CustomData['Question']
    : TData extends QuestionCategory
      ? CustomData['QuestionCategory']
      : object;

/**
 * Content to show as a hero figure for supported objects.
 */
export type HeroContent = Emoji | Image;

/**
 * An emoji to be displayed as a hero figure.
 */
export type Emoji = {
  emoji: string;
};

/**
 * A set of arguments extracted from comment.
 */
export type QuestionArguments = {
  /**
   * The arguments.
   */
  arguments: Array<Argument>;
  /**
   * The type of the arguments.
   */
  type: ArgumentType;
  /**
   * Possible reference to a specific choice in case of categorical arguments.
   */
  choiceId?: Id;
};

/**
 * Represents a condensed argument extracted from comments.
 */
export type Argument = {
  /**
   * The unique identifier for this argument (currently a mock id generated by the LLM)
   */
  id?: string;
  /**
   * The condensed argument text
   */
  content: string;
};

/**
 * The properties for defining generated question info in customData
 */
export type QuestionInfoSection = {
  /**
   * The title of the section.
   */
  title: string;
  /**
   * The (html) content of the section.
   */
  content: string;
};

/**
 * The properties for defining term definitions in customData
 */
export type TermDefinition = {
  /**
   * The strings that trigger the popup. There may in theory be many different forms in the same question.
   */
  triggers: Array<string>;
  /**
   * Title of the term explanation (the term)
   */
  title?: string;
  /**
   * Term explanation
   */
  content: string;
};

/**
 * The properties for defining video content in customData. See the `Video` component for more details.
 */
export type VideoContent = {
  /**
   * The title of the video for labelling.
   */
  title: string;
  /**
   * The source URLs of the video.
   */
  sources: Array<string>;
  /**
   * The source URL for the video's captions.
   */
  captions: string;
  /**
   * The poster image URL for the video.
   */
  poster: string;
  /**
   * The aspect ratio of the video. This is needed so that the component can be sized correctly even before the data is loaded.
   */
  aspectRatio: number;
  /**
   * Optional transcript text for the video as a HTML string. If empty, `captions` will be used instead.
   */
  transcript?: string;
};
