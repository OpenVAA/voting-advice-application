import type { CondensationPromptCall } from '../llm/promptInstance';
import type { Argument } from './argument';

/**
 * Result from a single condensation step (map, reduce, iterateMap or refine)
 *
 * @example
 *
 * const result: CondensationStepResult = {
 *   arguments: [argument1, argument2],
 *   promptCalls: [promptCall1, promptCall2],
 *   nodeIds: ['node1', 'node2']
 * };
 */
export interface CondensationStepResult {
  /** The arguments generated by the step.
   * Either a single array of arguments or an array of arrays of arguments. */
  arguments: Array<Argument> | Array<Array<Argument>>;
  /** The prompt calls made by the step */
  promptCalls: Array<CondensationPromptCall>;
  /** The node IDs of the arguments */
  nodeIds?: Array<string>;
  /** Specific parent mapping for each node - each inner array contains the parent IDs for that node */
  nodeMapping?: Array<Array<string>>;
}
