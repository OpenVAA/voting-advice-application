services:
  # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
  awslocal:
    image: localstack/localstack
    ports:
      - '127.0.0.1:4566:4566'
    environment:
      DEBUG: 1
      AWS_SES_REGION: ${AWS_SES_REGION}
      MAIL_FROM: ${MAIL_FROM}
      AWS_SES_ACCESS_KEY_ID: ${AWS_SES_ACCESS_KEY_ID}
      AWS_SES_SECRET_ACCESS_KEY: ${AWS_SES_SECRET_ACCESS_KEY}
      AWS_S3_ACCESS_KEY_ID: ${AWS_S3_ACCESS_KEY_ID}
      AWS_S3_ACCESS_SECRET: ${AWS_S3_ACCESS_SECRET}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    volumes:
      - awslocal:/var/lib/localstack
      - ./localstack-init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh
      - ./localstack-s3-cors-policy.json:/etc/localstack/s3-cors-policy.json
      # Mounting the Docker socket /var/run/docker.sock as a volume is required for some services
      # that use Docker to provide the emulation, such as AWS Lambda.
      - '/var/run/docker.sock:/var/run/docker.sock'
  strapi:
    build:
      # Context includes the root of the repository so that we can expose shared/ module.
      context: ../../
      dockerfile: backend/vaa-strapi/Dockerfile
      target: development
    ports:
      - ${STRAPI_PORT}:${STRAPI_PORT}
    depends_on:
      awslocal:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: always
    environment:
      STRAPI_HOST: ${STRAPI_HOST}
      STRAPI_PORT: ${STRAPI_PORT}
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_HOST: postgres
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA}
      DATABASE_SSL_SELF: ${DATABASE_SSL_SELF}
      GENERATE_MOCK_DATA_ON_INITIALISE: ${GENERATE_MOCK_DATA_ON_INITIALISE}
      GENERATE_MOCK_DATA_ON_RESTART: ${GENERATE_MOCK_DATA_ON_RESTART}
      LOAD_DATA_ON_INITIALISE_FOLDER: ${LOAD_DATA_ON_INITIALISE_FOLDER}
      AWS_SES_ACCESS_KEY_ID: ${AWS_SES_ACCESS_KEY_ID}
      AWS_SES_SECRET_ACCESS_KEY: ${AWS_SES_SECRET_ACCESS_KEY}
      AWS_SES_REGION: ${AWS_SES_REGION}
      MAIL_FROM: ${MAIL_FROM}
      MAIL_REPLY_TO: ${MAIL_REPLY_TO}
      AWS_S3_ACCESS_KEY_ID: ${AWS_S3_ACCESS_KEY_ID}
      AWS_S3_ACCESS_SECRET: ${AWS_S3_ACCESS_SECRET}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      STATIC_CONTENT_BASE_URL: ${STATIC_CONTENT_BASE_URL}
      STATIC_MEDIA_CONTENT_PATH: ${STATIC_MEDIA_CONTENT_PATH}
      LOCALSTACK_ENDPOINT: http://awslocal:4566
    volumes:
      # Creating this volume will make Docker update changes from local automatically
      # Note that this only applies to src/, where all the source code is anyway.
      # - ./src:/opt/backend/vaa-strapi/src
      - strapi-uploads:/opt/backend/vaa-strapi/public/uploads
    healthcheck:
      test: wget --no-verbose --tries=1 --spider ${STRAPI_HOST}:${STRAPI_PORT} || exit 1
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 45s
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - '4567:8080'

volumes:
  postgres:
  strapi-uploads:
  awslocal:
