{
  "root": true,
  "globals": {
    "ElectionProps": "writable",
    "PartyProps": "writable",
    "CandidateProps": "writable",
    "QuestionProps": "writable",
    "RankingProps": "writable"
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "extraFileExtensions": [".svelte"], // This is a required setting in `@typescript-eslint/parser` v4.24.0.
    "sourceType": "module",
    "ecmaVersion": 2020
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "plugin:svelte/prettier"
  ],
  "plugins": ["@typescript-eslint", "import"],
  "ignorePatterns": ["*.cjs", "ios/*", "android/*"],
  "overrides": [
    {
      "files": ["*.svelte"],
      "parser": "svelte-eslint-parser",
      "parserOptions": {
        "parser": "@typescript-eslint/parser"
      }
    }
  ],
  "settings": {
    "svelte/typescript": true,
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,

        "project": "./tsconfig.json"
      }
    }
  },
  "env": {
    "browser": true,
    "es2017": true,
    "node": true,
    "jest": true
  },
  "rules": {
    "no-console": ["error", { "allow": ["warn", "error", "info"] }],
    "no-undef": "off",
    "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": false }],
    "@typescript-eslint/no-duplicate-enum-values": "off",
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "generic"
      }
    ],
    // "no-restricted-syntax": [
    //   "error",
    //   {
    //     "selector": "TSEnumDeclaration",
    //     "message": "Use const assertion or a string union type instead."
    //   }
    // ],

    // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/order.md
    "import/order": [
      "warn",
      {
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        },
        "newlines-between": "never",
        "pathGroups": [
          {
            "pattern": "$/**",
            "group": "external"
          },
          {
            "pattern": "./**",
            "group": "internal",
            "position": "after"
          }
        ]
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        // Generic type parameter must start with letter T, followed by any uppercase letter.
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "custom": { "regex": "^T[A-Z]", "match": true }
      },
      {
        // Types must be pascalCase
        "selector": "typeAlias",
        "format": ["PascalCase"]
      }
    ]
  }
}
