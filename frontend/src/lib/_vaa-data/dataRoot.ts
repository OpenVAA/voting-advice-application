import {Candidate, Election, Updatable} from './internal';
import type {CandidateData, ElectionData, Id, Collection, Party} from './internal';
import {order} from './order';

/*
 * DataRoot is the root for all of the DataObjects. Data passed by the DataProvider is passed to the DataRoot, which converts it into DataObjects and organises them.
 */
export class DataRoot extends Updatable {
  /**
   * These can be set to change the way data is formatted by accessors depending on, e.g., locale. NB. If the object data already contains the target property, it will take precedence over that generated by a formatter.
   */
  format = {
    initials: formatInitials,
    name: formatName
  };

  protected children: {
    candidates?: Collection<Candidate>;
    elections?: Collection<Election>;
    parties?: Collection<Party>;
  } = {};

  constructor() {
    super(null);
  }

  get candidates(): Collection<Candidate> | undefined {
    return this.children.candidates ? [...this.children.candidates] : undefined;
  }

  get elections(): Collection<Election> | undefined {
    return this.children.elections ? [...this.children.elections] : undefined;
  }

  getCandidate(id: Id): Candidate | undefined {
    return this.children.candidates?.find((o) => `${o.id}` === `${id}`);
  }

  getParty(id: Id): Party | undefined {
    return this.children.parties?.find((o) => `${o.id}` === `${id}`);
  }

  /**
   * Provide election data to the DataRoot. Can only be called once unless reset.
   */
  provideElectionData(data: Readonly<Array<ElectionData>>): Collection<Election> {
    if (!this.children.elections)
      console.info(`[debug] DataRoot.provideElectionData() with ${data.length} elections`);
    if (!this.children.elections)
      this.update(
        () => (this.children.elections = [...data].sort(order).map((d) => new Election(d, this)))
      );
    return this.elections!;
  }

  /**
   * Provide the candidate data to the DataRoot. Note that already existing candidates will not be replaced.
   */
  provideCandidateData(data: Readonly<Array<CandidateData>>): Collection<Candidate> {
    if (this.children.candidates) {
      const ids = this.children.candidates?.map((c) => c.id) ?? [];
      data = data.filter((d) => !ids.includes(d.id));
    }
    if (data.length)
      console.info(
        `[debug] DataRoot.provideCandidateData() with ${data.length} new candidates`,
        data.map((d) => d.firstName)
      );
    // TODO: Link parties and other entities to the candidates
    if (data.length)
      this.update(
        () =>
          (this.children.candidates = [
            ...(this.children.candidates ?? []),
            ...data.map((d) => new Candidate(d, this))
          ].sort(order))
      );
    return this.candidates!;
  }
}

/**
 * Creates intials for a candidate.
 * @example Ben Johnson => BJ
 * @example Johan af Gran' => JaG
 */
export function formatInitials(candidate: Candidate): string {
  return `${candidate.firstName} ${candidate.lastName}`
    .split(/ +/)
    .map((word) => `${word.substring(0, 1)}`)
    .join('');
}

export function formatName(candidate: Candidate): string {
  return `${candidate.firstName} ${candidate.lastName}`;
}
