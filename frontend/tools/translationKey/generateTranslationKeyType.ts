import fs from 'fs';
import path from 'path';

// Path where generated file is output
const outputPath = path.join('src', 'lib', 'types', 'generated', 'translationKey.ts');

// Path to translation files from the frontend directory
const dirPath = path.join('src', 'lib', 'i18n', 'translations');

const locales = fs.readdirSync(dirPath).filter((name) => {
  return fs.lstatSync(path.join(dirPath, name)).isDirectory();
});

// Names of translation files in the directory of the first locale
const filenames = fs.readdirSync(path.join(dirPath, locales[0]));

// Array of flattened translation keys
const translationFilesKeys = filenames.flatMap((filename) => {
  return getFlattenedTranslationKeys(locales[0], filename);
});

const langKeys = locales.map((locale) => `lang.${locale}`);
const translationKeys = [...translationFilesKeys, ...langKeys].sort();

const comment =
  '/** Auto-generated by `/frontend/tools/translationKey/generateTranslationKeyType.ts` */';
const output = `${comment}\nexport type TranslationKey = ${translationKeys.map((s) => `'${s}'`).join(' | ')}`;

fs.writeFileSync(outputPath, output);

type Translations = {
  [key: string]: Translations | string;
};

/**
 * Recursive function which returns sorted array of flattened keys.
 *
 * For example `{a: 'abc', b: {c: 'def'}}` is returned as `['<prefix>.a', '<prefix>.b.c']`
 */
function flattenKeys(obj: Translations, prefix: string): Array<string> {
  const res = Array<string>();
  for (const key in obj) {
    if (typeof obj[key] !== 'object') {
      res.push(`${prefix}.${key}`);
    } else {
      res.push(...flattenKeys(obj[key], `${prefix}.${key}`));
    }
  }
  return res;
}

/**
 * Reads contents of translation file and returns array of flattened keys.
 */
function getFlattenedTranslationKeys(locale: string, filename: string): Array<string> {
  const filePath = path.join(dirPath, locale, filename);
  const fileContentString = fs.readFileSync(filePath).toString();
  const fileContentJSON: Translations = JSON.parse(fileContentString);
  return flattenKeys(fileContentJSON, filename.replace('.json', ''));
}
